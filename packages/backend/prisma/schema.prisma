generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Alert {
  id          BigInt        @id @default(autoincrement())
  source      String        @db.VarChar(100)
  alertType   String        @map("alert_type") @db.VarChar(100)
  title       String        @db.VarChar(255)
  description String        @db.Text
  severity    Int           @db.TinyInt
  location    String?       @db.VarChar(255)
  // Vector embedding for semantic search (768 dimensions for Jina base model)
  embedding   Unsupported("VECTOR(768)")?
  latitude    Float?
  longitude   Float?
  startTime   DateTime      @map("start_time")
  endTime     DateTime?     @map("end_time")
  isActive    Boolean       @default(true) @map("is_active")
  rawData     Json?         @map("raw_data")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  documents   Document[]
  actions     ActionAudit[]

  // Full-text search on title and description
  @@fulltext([title, description])
  // Note: Vector indexes must be added via SQL migration
  // Example: CREATE VECTOR INDEX ON alerts(embedding) USING HNSW;
  @@index([alertType])
  @@index([severity])
  @@index([latitude, longitude])
  @@index([isActive, createdAt])
  @@map("alerts")
}

model Document {
  id             BigInt    @id @default(autoincrement())
  title          String    @db.VarChar(255)
  content        String    @db.Text
  summary        String?   @db.Text
  source         String?   @db.VarChar(100) @default("system")
  category       String    @db.VarChar(100)
  // Vector embedding for semantic search (768 dimensions for Jina models)
  embedding      Unsupported("VECTOR(768)")?
  sourceUrl      String?   @map("source_url") @db.VarChar(500)
  mediaUrl       String?   @map("media_url") @db.VarChar(500)
  language       String    @default("en") @db.VarChar(10)
  // Optional image embeddings (same dimension as text for now)
  imageEmbedding Unsupported("VECTOR(768)")? @map("image_embedding")
  wordCount      Int?      @map("word_count")
  readingTime    Int?      @map("reading_time")
  confidence     Float?    @db.Float
  publishedAt    DateTime? @map("published_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  alertId        BigInt?   @map("alert_id")
  alert          Alert?    @relation(fields: [alertId], references: [id])

  // Hybrid search: full-text + vector similarity
  // Note: Vector indexes must be added via SQL migration
  // Example: CREATE VECTOR INDEX ON documents(embedding) USING HNSW;
  @@fulltext([title, content])
  @@index([category])
  @@index([publishedAt])
  @@index([confidence])
  @@index([alertId], map: "documents_alert_id_fkey")
  @@map("documents")
}

model Resource {
  id             BigInt   @id @default(autoincrement())
  name           String   @db.VarChar(255)
  type           String   @db.VarChar(100)
  description    String?  @db.Text
  address        String   @db.VarChar(500)
  city           String   @db.VarChar(100)
  state          String   @db.VarChar(100)
  country        String   @default("US") @db.VarChar(50)
  postalCode     String?  @map("postal_code") @db.VarChar(20)
  latitude       Float
  longitude      Float
  phone          String?  @db.VarChar(50)
  email          String?  @db.VarChar(255)
  website        String?  @db.VarChar(500)
  capacity       Int?
  currentLoad    Int?     @map("current_load")
  isActive       Boolean  @default(true) @map("is_active")
  isEmergency    Boolean  @default(false) @map("is_emergency")
  operatingHours Json?    @map("operating_hours")
  services       Json?
  disasterTypes  Json?    @map("disaster_types")
  lastUpdated    DateTime @default(now()) @map("last_updated")
  // Vector embedding for semantic search (768 dimensions for Jina models)
  embedding      Unsupported("VECTOR(768)")?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Hybrid search: full-text + vector similarity
  // Note: Vector indexes must be added via SQL migration
  // Example: CREATE VECTOR INDEX ON resources(embedding) USING HNSW;
  @@fulltext([name, description, address, city, state])
  @@index([type])
  @@index([latitude, longitude])
  @@index([isActive, isEmergency])
  @@map("resources")
}

model ActionAudit {
  id        BigInt   @id @default(autoincrement())
  alertId   BigInt?  @map("alert_id")
  alert     Alert?   @relation(fields: [alertId], references: [id], onDelete: Cascade)
  action    String   @db.VarChar(100)
  payload   Json?
  status    String   @db.VarChar(50)
  errorMsg  String?  @map("error_msg") @db.Text
  duration  Int?
  createdAt DateTime @default(now()) @map("created_at")

  @@index([alertId])
  @@index([action, status])
  @@index([createdAt])
  @@map("action_audit")
}

model WorkQueue {
  id          BigInt    @id @default(autoincrement())
  taskType    String    @map("task_type") @db.VarChar(50)
  payload     Json
  status      String    @default("PENDING") @db.VarChar(20)
  retryCount  Int       @default(0) @map("retry_count")
  maxRetries  Int       @default(3) @map("max_retries")
  priority    Int       @default(5)
  scheduledAt DateTime? @map("scheduled_at")
  startedAt   DateTime? @map("started_at")
  completedAt DateTime? @map("completed_at")
  errorMsg    String?   @map("error_msg") @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([status, priority])
  @@index([taskType, status])
  @@index([scheduledAt])
  @@map("work_queue")
}
