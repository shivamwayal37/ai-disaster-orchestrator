version: '3.8'

services:
  # Frontend - Next.js Dashboard
  frontend:
    build: 
      context: ./packages/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:3001
      - NODE_ENV=development
    depends_on:
      - backend
    volumes:
      - ./packages/frontend/src:/app/src
      - ./packages/frontend/public:/app/public
    restart: unless-stopped

  # Backend - Express API Gateway
  backend:
    build: 
      context: ./packages/backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - PORT=3001
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./packages/backend/src:/app/src
      - ./packages/backend/logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Caching & Queue Management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Embedding Worker - AI Processing
  embedding-worker:
    build: 
      context: ./packages/backend
      dockerfile: Dockerfile
    command: node src/worker/embedding-processor.js
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - EMBEDDING_BATCH_SIZE=10
      - REDIS_URL=redis://redis:6379
      - WORKER_CONCURRENCY=2
    depends_on:
      - redis
      - backend
    volumes:
      - ./packages/backend/logs:/app/logs
    restart: unless-stopped

  # Ingestion Worker - Data Collection
  ingestion-worker:
    build: 
      context: ./packages/backend
      dockerfile: Dockerfile
    command: node src/ingestion/orchestrator.js run
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - INGESTION_INTERVAL=300000
    depends_on:
      - redis
      - backend
    volumes:
      - ./packages/backend/logs:/app/logs
    restart: unless-stopped

  # Nginx - Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis_data:
    driver: local

networks:
  default:
    name: disaster-orchestrator
